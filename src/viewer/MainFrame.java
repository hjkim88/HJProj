/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 2010. 12. 21, 오후 4:12:32
 */

package viewer;

import javax.swing.UIManager;
import javax.swing.JFrame;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.JTabbedPane;
import javax.swing.JRadioButtonMenuItem;
import org.jfree.ui.RefineryUtilities;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;

/**
 *
 * @author KHJ
 */
public class MainFrame extends javax.swing.JFrame {

    private file.ReadExcelFile ref;
    private graph.ClusterScatterPlot csp;
    private graph.MakeScatterPlot msp;
    private graph.MakeLineChart mlc;
    private table.TableModel tm;
    private file.ReadClassifierFile rcf;
    private String[] objNames;
    private String[] objDirs;
    private int[] ftrRow;
    private int[][] resultPair;
    private String[] featureList;

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        initVariables();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tTabPopUpMenu = new javax.swing.JPopupMenu();
        tTabNameMenuItem = new javax.swing.JMenuItem();
        tTabPopUpSptr = new javax.swing.JPopupMenu.Separator();
        makeSPMenuItem = new javax.swing.JMenuItem();
        makeLCMenuItem = new javax.swing.JMenuItem();
        tCloseMenuItem = new javax.swing.JMenuItem();
        viewBtnGrp = new javax.swing.ButtonGroup();
        gTabPopUpMenu = new javax.swing.JPopupMenu();
        gTabNameMenuItem = new javax.swing.JMenuItem();
        gTabPopUpSptr = new javax.swing.JPopupMenu.Separator();
        gCloseMenuItem = new javax.swing.JMenuItem();
        mainPanel = new javax.swing.JPanel();
        excelTabbedPanel = new javax.swing.JTabbedPane();
        graphTabbedPanel = new javax.swing.JTabbedPane();
        excelMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        makeARFFMenuItem = new javax.swing.JMenuItem();
        readFTRMenuItem = new javax.swing.JMenuItem();
        makeCFMenuItem = new javax.swing.JMenuItem();
        readCFMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        editableMenuItem = new javax.swing.JCheckBoxMenuItem();
        viewMenu = new javax.swing.JMenu();
        tableMenuItem = new javax.swing.JRadioButtonMenuItem();
        graphMenuItem = new javax.swing.JRadioButtonMenuItem();
        resultMenu = new javax.swing.JMenu();
        makeFtrMenuItem = new javax.swing.JMenuItem();
        clstrScatterPlotMenuItem = new javax.swing.JMenuItem();
        kMeansMDMenuItem = new javax.swing.JMenuItem();
        predictMenu = new javax.swing.JMenu();
        predictSSMenuItem = new javax.swing.JMenuItem();
        predictAllMenuItem = new javax.swing.JMenuItem();
        loocvMenuItem = new javax.swing.JMenuItem();
        predictTMenuItem = new javax.swing.JMenuItem();
        rocMenuItem = new javax.swing.JMenuItem();
        FSMenu = new javax.swing.JMenu();
        FSAVDMenuItem = new javax.swing.JMenuItem();

        tTabNameMenuItem.setFont(new java.awt.Font("맑은 고딕", 1, 14));
        tTabNameMenuItem.setEnabled(false);
        tTabPopUpMenu.add(tTabNameMenuItem);
        tTabPopUpMenu.add(tTabPopUpSptr);

        makeSPMenuItem.setText("Make Scatter Plot");
        makeSPMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeSPMenuItemActionPerformed(evt);
            }
        });
        tTabPopUpMenu.add(makeSPMenuItem);

        makeLCMenuItem.setText("Make Line Chart");
        makeLCMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeLCMenuItemActionPerformed(evt);
            }
        });
        tTabPopUpMenu.add(makeLCMenuItem);

        tCloseMenuItem.setText("Close");
        tCloseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCloseMenuItemActionPerformed(evt);
            }
        });
        tTabPopUpMenu.add(tCloseMenuItem);

        gTabNameMenuItem.setFont(new java.awt.Font("맑은 고딕", 1, 14));
        gTabNameMenuItem.setEnabled(false);
        gTabPopUpMenu.add(gTabNameMenuItem);
        gTabPopUpMenu.add(gTabPopUpSptr);

        gCloseMenuItem.setText("Close");
        gCloseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gCloseMenuItemActionPerformed(evt);
            }
        });
        gTabPopUpMenu.add(gCloseMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Frame");

        mainPanel.setLayout(new java.awt.CardLayout());

        excelTabbedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                excelTabbedPanelMousePressed(evt);
            }
        });
        mainPanel.add(excelTabbedPanel, "card1");

        graphTabbedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                graphTabbedPanelMousePressed(evt);
            }
        });
        mainPanel.add(graphTabbedPanel, "card2");

        fileMenu.setText("     File     ");

        openMenuItem.setText("Open Excel File");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save Excel File");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        makeARFFMenuItem.setText("Make ARFF File");
        makeARFFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeARFFMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(makeARFFMenuItem);

        readFTRMenuItem.setText("Read FTR File");
        readFTRMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFTRMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(readFTRMenuItem);

        makeCFMenuItem.setText("Make CF File");
        makeCFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeCFMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(makeCFMenuItem);

        readCFMenuItem.setText("Read CF File");
        readCFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readCFMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(readCFMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        excelMenuBar.add(fileMenu);

        editMenu.setText("     Edit     ");

        editableMenuItem.setText("isEditable");
        editMenu.add(editableMenuItem);

        excelMenuBar.add(editMenu);

        viewMenu.setText("     View     ");

        viewBtnGrp.add(tableMenuItem);
        tableMenuItem.setSelected(true);
        tableMenuItem.setText("     Table     ");
        tableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(tableMenuItem);

        viewBtnGrp.add(graphMenuItem);
        graphMenuItem.setText("     Graph     ");
        graphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(graphMenuItem);

        excelMenuBar.add(viewMenu);

        resultMenu.setText("     Results     ");

        makeFtrMenuItem.setText("Make Featured Table");
        makeFtrMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeFtrMenuItemActionPerformed(evt);
            }
        });
        resultMenu.add(makeFtrMenuItem);

        clstrScatterPlotMenuItem.setText("Cluster Scatter Plot");
        clstrScatterPlotMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clstrScatterPlotMenuItemActionPerformed(evt);
            }
        });
        resultMenu.add(clstrScatterPlotMenuItem);

        kMeansMDMenuItem.setText("Get Pairs (K-Means & MD)");
        kMeansMDMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kMeansMDMenuItemActionPerformed(evt);
            }
        });
        resultMenu.add(kMeansMDMenuItem);

        excelMenuBar.add(resultMenu);

        predictMenu.setText("     Prediction     ");

        predictSSMenuItem.setText("Predict Selected Sample");
        predictSSMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictSSMenuItemActionPerformed(evt);
            }
        });
        predictMenu.add(predictSSMenuItem);

        predictAllMenuItem.setText("Predict All");
        predictAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictAllMenuItemActionPerformed(evt);
            }
        });
        predictMenu.add(predictAllMenuItem);

        loocvMenuItem.setText("LOOCV");
        loocvMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loocvMenuItemActionPerformed(evt);
            }
        });
        predictMenu.add(loocvMenuItem);

        predictTMenuItem.setText("Predict Test Samples");
        predictTMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictTMenuItemActionPerformed(evt);
            }
        });
        predictMenu.add(predictTMenuItem);

        rocMenuItem.setText("ROC Curve");
        rocMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rocMenuItemActionPerformed(evt);
            }
        });
        predictMenu.add(rocMenuItem);

        excelMenuBar.add(predictMenu);

        FSMenu.setText("     Feature Selection     ");

        FSAVDMenuItem.setText("FSAVD               ");
        FSAVDMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSAVDMenuItemActionPerformed(evt);
            }
        });
        FSMenu.add(FSAVDMenuItem);

        excelMenuBar.add(FSMenu);

        setJMenuBar(excelMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initVariables() {
        ref = new file.ReadExcelFile();
        csp = new graph.ClusterScatterPlot();
        msp = new graph.MakeScatterPlot();
        mlc = new graph.MakeLineChart();
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        openFileChooser(1);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void excelTabbedPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_excelTabbedPanelMousePressed
        // TODO add your handling code here:
        if(evt.getModifiers() == evt.BUTTON3_MASK && (excelTabbedPanel.getTabCount() != 0)) {
            this.tTabNameMenuItem.setText(this.excelTabbedPanel.getTitleAt(excelTabbedPanel.getSelectedIndex()));
            this.tTabPopUpMenu.show(this.excelTabbedPanel, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_excelTabbedPanelMousePressed

    private void tCloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCloseMenuItemActionPerformed
        // TODO add your handling code here:
        this.excelTabbedPanel.remove(excelTabbedPanel.getSelectedIndex());
    }//GEN-LAST:event_tCloseMenuItemActionPerformed

    private void makeSPMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeSPMenuItemActionPerformed
        // TODO add your handling code here:
        JScrollPane jsp = (JScrollPane) this.excelTabbedPanel.getSelectedComponent();
        JViewport jvp = (JViewport) jsp.getComponent(0);
        JTable t = (JTable) jvp.getComponents()[0];
        this.graphTabbedPanel.addTab(excelTabbedPanel.getTitleAt(excelTabbedPanel.getSelectedIndex()),
                msp.scatterPlot(1, excelTabbedPanel.getTitleAt(excelTabbedPanel.getSelectedIndex()), makeSPData(t)));
        this.graphTabbedPanel.setSelectedIndex(graphTabbedPanel.getTabCount()-1);
        graphMenuItem.setSelected(true);
        excelTabbedPanel.setVisible(false);
        graphTabbedPanel.setVisible(true);
    }//GEN-LAST:event_makeSPMenuItemActionPerformed

    private String[][] makeSPData(JTable t) {
        String[][] data = new String[2][t.getColumnCount()-1];

        for(int i = 0; i < 2; i++) {
            for(int j = 0; j < t.getColumnCount()-1; j++) {
                data[i][j] = t.getValueAt(t.getSelectedRows()[i], j).toString();
            }
        }
        
        return data;
    }

    private String[] makeLCCName(JTable t) {
        String[] colName = new String[t.getSelectedColumnCount()];

        for(int i = 0; i < colName.length; i++) {
            colName[i] = t.getColumnName(t.getSelectedColumns()[i]);
        }

        return colName;
    }

    private String[][] makeLCData(JTable t) {
        String[][] data = new String[t.getSelectedColumnCount()][t.getRowCount()-1];

        for(int i = 0; i < t.getSelectedColumnCount(); i++) {
            for(int j = 0; j < t.getRowCount()-1; j++) {
                data[i][j] = t.getValueAt(j+1, t.getSelectedColumns()[i]).toString();
            }
        }

        return data;
    }

    public JTabbedPane getGraphPanel() {
        return this.graphTabbedPanel;
    }

    public JTabbedPane getExlPanel() {
        return this.excelTabbedPanel;
    }

    public JRadioButtonMenuItem getGraphBtn() {
        return this.graphMenuItem;
    }

    private void graphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphMenuItemActionPerformed
        // TODO add your handling code here:
        excelTabbedPanel.setVisible(false);
        graphTabbedPanel.setVisible(true);
    }//GEN-LAST:event_graphMenuItemActionPerformed

    private void tableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableMenuItemActionPerformed
        // TODO add your handling code here:
        excelTabbedPanel.setVisible(true);
        graphTabbedPanel.setVisible(false);
    }//GEN-LAST:event_tableMenuItemActionPerformed

    private void makeLCMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeLCMenuItemActionPerformed
        // TODO add your handling code here:
        JScrollPane jsp = (JScrollPane) this.excelTabbedPanel.getSelectedComponent();
        JViewport jvp = (JViewport) jsp.getComponent(0);
        JTable t = (JTable) jvp.getComponents()[0];
        this.graphTabbedPanel.addTab(excelTabbedPanel.getTitleAt(excelTabbedPanel.getSelectedIndex()),
                mlc.lineChart(makeLCCName(t), makeLCData(t)));
        this.graphTabbedPanel.setSelectedIndex(graphTabbedPanel.getTabCount()-1);
        graphMenuItem.setSelected(true);
        excelTabbedPanel.setVisible(false);
        graphTabbedPanel.setVisible(true);
    }//GEN-LAST:event_makeLCMenuItemActionPerformed

    private void makeARFFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeARFFMenuItemActionPerformed
        // TODO add your handling code here:
        openFileChooser(2);
    }//GEN-LAST:event_makeARFFMenuItemActionPerformed

    private JTable getTableFromTab(int num) {
        if(num == -1) {
            JScrollPane jsp = (JScrollPane) this.excelTabbedPanel.getSelectedComponent();
            JViewport jvp = (JViewport) jsp.getComponent(0);
            JTable t = (JTable) jvp.getComponents()[0];

            return t;
        }
        else {
            JScrollPane jsp = (JScrollPane) this.excelTabbedPanel.getComponentAt(num);
            JViewport jvp = (JViewport) jsp.getComponent(0);
            JTable t = (JTable) jvp.getComponents()[0];

            return t;
        }
    }

    private void readFTRMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFTRMenuItemActionPerformed
        // TODO add your handling code here:
        openFileChooser(3);
    }//GEN-LAST:event_readFTRMenuItemActionPerformed

    private void gCloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gCloseMenuItemActionPerformed
        // TODO add your handling code here:
        this.graphTabbedPanel.remove(graphTabbedPanel.getSelectedIndex());
    }//GEN-LAST:event_gCloseMenuItemActionPerformed

    private void graphTabbedPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphTabbedPanelMousePressed
        // TODO add your handling code here:
        if(evt.getModifiers() == evt.BUTTON3_MASK && (graphTabbedPanel.getTabCount() != 0)) {
            this.gTabNameMenuItem.setText(this.graphTabbedPanel.getTitleAt(graphTabbedPanel.getSelectedIndex()));
            this.gTabPopUpMenu.show(this.graphTabbedPanel, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_graphTabbedPanelMousePressed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        openFileChooser(4);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void makeFtrMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeFtrMenuItemActionPerformed
        // TODO add your handling code here:
        tm = new table.TableModel();
        JTable t = getTableFromTab(-1);
        String[] colName = new String[t.getColumnCount()];
        String[] rowName = new String[ftrRow.length+1];
        tm.newData(ftrRow.length+1, t.getColumnCount());
        tm.setColumnNames(colName);
        for(int i = 0; i < ftrRow.length+1; i++) {
            if(i > 0) {
                rowName[i] = t.getValueAt(ftrRow[i-1], 0).toString();
            }
            for(int j = 0; j < t.getColumnCount(); j++) {
                if(i == 0) {
                    tm.setValueAt(t.getValueAt(i, j), i, j);
                    colName[j] = t.getColumnName(j);
                }
                else {
                    tm.setValueAt(t.getValueAt(ftrRow[i-1], j), i, j);
                }
            }
        }
        tm.setColumnNames(colName);
        tm.setRowNames(rowName);
        JTable table = new JTable(tm);
        table.setCellSelectionEnabled(true);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for(int n = 0; n < table.getColumnCount(); n++) {
            table.getColumnModel().getColumn(n).setPreferredWidth(100);
        }
        JScrollPane sp = new JScrollPane(table);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        this.excelTabbedPanel.addTab("Featured "
                + excelTabbedPanel.getTitleAt(excelTabbedPanel.getSelectedIndex()), sp);
        this.excelTabbedPanel.setSelectedIndex(excelTabbedPanel.getTabCount()-1);
    }//GEN-LAST:event_makeFtrMenuItemActionPerformed

    private void clstrScatterPlotMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clstrScatterPlotMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());

        int[] getSelectedRows = getTableFromTab(-1).getSelectedRows();

        int[] columnNum = new int[index.length];
        int columnMax = 0;

        for(int n = 0; n < index.length; n++) {
            columnNum[n] = getTableFromTab(index[n]).getColumnCount();
            columnMax = Math.max(columnMax, columnNum[n]);
        }

        String[][][] data = new String[index.length][2][columnMax-1];

        for(int i = 0; i < index.length; i++) {
            for(int j = 0; j < 2; j++) {
                for(int k = 0; k < columnNum[i]-1; k++) {
                    data[i][j][k] = getTableFromTab(index[i]).getValueAt(getSelectedRows[j], k).toString();
                }
            }
        }

        this.graphTabbedPanel.addTab("Result", csp.scatterPlot(data));
        this.graphTabbedPanel.setSelectedIndex(graphTabbedPanel.getTabCount()-1);
        graphMenuItem.setSelected(true);
        excelTabbedPanel.setVisible(false);
        graphTabbedPanel.setVisible(true);
    }//GEN-LAST:event_clstrScatterPlotMenuItemActionPerformed

    private void kMeansMDMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kMeansMDMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        JTable[] t = new JTable[index.length];
        for(int i = 0; i < index.length; i++) {
            t[i] = getTableFromTab(index[i]);
        }

        resultPair = new calculate.GetPairSet(t, this).Kmeans_MD();
        String[] str = new String[resultPair.length];
        for(int i = 0; i < str.length; i++) {
            str[i] = "Pair " + (i+1) + " = (" + resultPair[i][0] + ", " + resultPair[i][1] + ")";
        }
        viewer.ClassDlg.showDialogOnlyStr(this, false, str);
    }//GEN-LAST:event_kMeansMDMenuItemActionPerformed

    private void predictAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictAllMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        JTable[] t = new JTable[index.length];
        for(int i = 0; i < index.length; i++) {
            t[i] = getTableFromTab(index[i]);
        }

        resultPair = new int[10][2];
        resultPair[0][0] = 53;
        resultPair[0][1] = 131;
        resultPair[1][0] = 74;
        resultPair[1][1] = 131;
        resultPair[2][0] = 58;
        resultPair[2][1] = 131;
        resultPair[3][0] = 25;
        resultPair[3][1] = 36;
        resultPair[4][0] = 25;
        resultPair[4][1] = 30;
        resultPair[5][0] = 36;
        resultPair[5][1] = 131;
        resultPair[6][0] = 25;
        resultPair[6][1] = 46;
        resultPair[7][0] = 25;
        resultPair[7][1] = 188;
        resultPair[8][0] = 36;
        resultPair[8][1] = 58;
        resultPair[9][0] = 58;
        resultPair[9][1] = 74;

        double[] accuracy = new prediction.PredictionAll(t, resultPair).getAccuracy();
        String str = "";

        for(int j = 0; j < accuracy.length-1; j++) {
            str = str + "Class " + (j+1) + " Accuracy = " + (int)(100 * accuracy[j]) / 100F + "%\n";
        }
        str = str + "Total Accuracy = " + (int)(100 * accuracy[accuracy.length-1]) / 100F + "%";
        
        JOptionPane.showMessageDialog(this,
            str,
            "Classification Accuracy",
            JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_predictAllMenuItemActionPerformed

    private void predictSSMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictSSMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        JTable[] t = new JTable[index.length];
        for(int i = 0; i < index.length; i++) {
            t[i] = getTableFromTab(index[i]);
        }

        JTable t1 = getTableFromTab(-1);
        int col = t1.getSelectedColumn();
        double[] sample = new double[t1.getRowCount()];

        for(int i = 0; i < sample.length; i++) {
            sample[i] = Double.parseDouble(t1.getValueAt(i, col).toString());
        }

        resultPair = new int[10][2];
        resultPair[0][0] = 74;
        resultPair[0][1] = 119;
        resultPair[1][0] = 66;
        resultPair[1][1] = 74;
        resultPair[2][0] = 52;
        resultPair[2][1] = 66;
        resultPair[3][0] = 36;
        resultPair[3][1] = 119;
        resultPair[4][0] = 58;
        resultPair[4][1] = 66;
        resultPair[5][0] = 52;
        resultPair[5][1] = 119;
        resultPair[6][0] = 58;
        resultPair[6][1] = 119;
        resultPair[7][0] = 66;
        resultPair[7][1] = 119;
        resultPair[8][0] = 25;
        resultPair[8][1] = 119;
        resultPair[9][0] = 66;
        resultPair[9][1] = 131;

        String classLabel = new prediction.Prediction(t, resultPair, sample).predictSS();

        JOptionPane.showMessageDialog(this,
            "Class Label = " + classLabel,
            "Classification Result",
            JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_predictSSMenuItemActionPerformed

    private void loocvMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loocvMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        JTable[] t = new JTable[index.length];
        for(int i = 0; i < index.length; i++) {
            t[i] = getTableFromTab(index[i]);
        }

        viewer.PredictionDlg pdlg = new viewer.PredictionDlg(this, false, t, false);
        RefineryUtilities.centerFrameOnScreen(pdlg);
        pdlg.setVisible(true);
    }//GEN-LAST:event_loocvMenuItemActionPerformed

    private void makeCFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeCFMenuItemActionPerformed
        // TODO add your handling code here:
        openFileChooser(5);
    }//GEN-LAST:event_makeCFMenuItemActionPerformed

    private void readCFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readCFMenuItemActionPerformed
        // TODO add your handling code here:
        openFileChooser(6);
    }//GEN-LAST:event_readCFMenuItemActionPerformed

    private void predictTMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictTMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        JTable[] t = new JTable[index.length];
        for(int i = 0; i < index.length; i++) {
            t[i] = getTableFromTab(index[i]);
        }
        double[] accuracy = new prediction.PredictTestSample(rcf.getClassifier(), rcf.getResultPair(), t).getAccuracy();
        String str = "";

        str = str + "Feature Number = " + global.Variables.featureNum + "\n";
        str = str + "Cluster Number = " + global.Variables.clstrNum + "\n";
        str = str + "Vote Set Number = " + global.Variables.majorityNum + "\n";

        for(int j = 0; j < accuracy.length-1; j++) {
            str = str + "Class " + (j+1) + " Accuracy = " + (int)(100 * accuracy[j]) / 100F + "%\n";
        }
        str = str + "Total Accuracy = " + (int)(100 * accuracy[accuracy.length-1]) / 100F + "%";

        JOptionPane.showMessageDialog(this,
            str,
            "Classification Accuracy(LOOCV)",
            JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_predictTMenuItemActionPerformed

    private void rocMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rocMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        if(index.length == 2) {
            JTable[] t = new JTable[index.length];
            for(int i = 0; i < index.length; i++) {
                t[i] = getTableFromTab(index[i]);
            }

            viewer.PredictionDlg pdlg = new viewer.PredictionDlg(this, false, t, true);
            RefineryUtilities.centerFrameOnScreen(pdlg);
            pdlg.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(this,
                        "ROC is only for binary classification.",
                        "ROC Warning",
                        JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_rocMenuItemActionPerformed

    private void FSAVDMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FSAVDMenuItemActionPerformed
        // TODO add your handling code here:
        int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
        JTable[] t = new JTable[index.length];
        for(int i = 0; i < index.length; i++) {
            t[i] = getTableFromTab(index[i]);
        }
        
        featureList = new feature.FSAVDMain(t, global.Variables.featureNum).getFeatureList();

        viewer.ClassDlg.showDialogOnlyStr2(this, false, featureList);

        System.out.println("FSAVD Complete.");
    }//GEN-LAST:event_FSAVDMenuItemActionPerformed

    private void showFile(int order) {
        ref.read(order, this.objDirs[order]);
        JTable table = new JTable(ref.getTableModel());
        table.setCellSelectionEnabled(true);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for(int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setPreferredWidth(100);
        }
        JScrollPane sp = new JScrollPane(table);
        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        this.excelTabbedPanel.addTab(objNames[order], sp);
    }

    public String[] getTabPaneTitle() {
        String[] str = new String[this.excelTabbedPanel.getTabCount()];

        for(int i = 0; i < str.length; i++) {
            str[i] = excelTabbedPanel.getTitleAt(i);
        }

        return str;
    }

    private void openFileChooser(int num) {             // Main Frame 안에 있는 것보다는 새로 Class를 만들어 빼는 것이 좋을 것 같다. 다음번에 코딩할때는 빼자!!
        JFileChooser fileChooser = new JFileChooser(global.Variables.fileChooserPath);

        if(num == 1) {
            fileChooser.setDialogTitle("Excel File Open");
            fileChooser.setMultiSelectionEnabled(true);
            FileFilter excelFilter = new FileNameExtensionFilter(
                    "Excel File (xls)", "xls");
            fileChooser.setFileFilter(excelFilter);
            int returnVal = fileChooser.showDialog(this, "OPEN");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                global.Variables.fileChooserPath = fileChooser.getSelectedFile().getParent();
                this.objNames = new String[fileChooser.getSelectedFiles().length];
                this.objDirs = new String[fileChooser.getSelectedFiles().length];
                for(int i = 0; i < this.objDirs.length; i++) {
                    this.objNames[i] = fileChooser.getSelectedFiles()[i].getName();
                    this.objDirs[i] = fileChooser.getSelectedFiles()[i].getPath();
                    showFile(i);
                }
                this.excelTabbedPanel.setSelectedIndex(excelTabbedPanel.getTabCount()-1);
            }
        }
        else if(num == 2) {
            fileChooser.setDialogTitle("ARFF Path");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fileChooser.showDialog(this, "OK");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                global.Variables.fileChooserPath = fileChooser.getSelectedFile().getParent();
                JScrollPane jsp = (JScrollPane) this.excelTabbedPanel.getSelectedComponent();
                JViewport jvp = (JViewport) jsp.getComponent(0);
                JTable t = (JTable) jvp.getComponents()[0];
                new file.MakeArffFile().makeFile(excelTabbedPanel.getTitleAt(excelTabbedPanel.getSelectedIndex()),
                    t, fileChooser.getSelectedFile().getPath());
                JOptionPane.showMessageDialog(this,
                    "Done.",
                    "Make ARFF File",
                    JOptionPane.PLAIN_MESSAGE);
            }
        }
        else if(num == 3) {
            fileChooser.setDialogTitle("Get Feature File Path");
            fileChooser.setMultiSelectionEnabled(false);
            FileFilter featureFilter = new FileNameExtensionFilter(
                    "Feature File (ftr)", "ftr");
            fileChooser.setFileFilter(featureFilter);
            int returnVal = fileChooser.showDialog(this, "READ");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                global.Variables.fileChooserPath = fileChooser.getSelectedFile().getParent();
                ftrRow = new file.ReadFeatureFile(fileChooser.getSelectedFile().getPath()).getOrder();
                viewer.ClassDlg.showDialogOnlyInt(this, false, ftrRow);
            }
        }
        else if(num == 4) {
            fileChooser.setDialogTitle("XLS Path");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fileChooser.showDialog(this, "OK");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                global.Variables.fileChooserPath = fileChooser.getSelectedFile().getParent();
                String s = (String)JOptionPane.showInputDialog(
                    this,
                    "File name ?",
                    "Write xsl file name",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    null,
                    "");
                new file.SaveXLSFile(fileChooser.getSelectedFile().getPath()
                        + "\\" + s + ".xls",
                        getTableFromTab(-1)).Save();
                JOptionPane.showMessageDialog(this,
                        "Done.",
                        "Save XLS File",
                        JOptionPane.PLAIN_MESSAGE);
            }
        }
        else if(num == 5) {
            fileChooser.setDialogTitle("CF Path");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fileChooser.showDialog(this, "OK");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                global.Variables.fileChooserPath = fileChooser.getSelectedFile().getParent();
                String s = (String)JOptionPane.showInputDialog(
                    this,
                    "File name ?",
                    "Write classifier file name",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    null,
                    "");
                int[] index = viewer.ClassDlg.showDialog(this, true, this.getTabPaneTitle());
                JTable[] t = new JTable[index.length];
                for(int i = 0; i < index.length; i++) {
                    t[i] = getTableFromTab(index[i]);
                }

                resultPair = new file.MakeClassifierFile(fileChooser.getSelectedFile().getPath()
                        + "\\" + s + ".cf", t, this).Kmeans_MD();
                String[] str = new String[resultPair.length];
                for(int i = 0; i < str.length; i++) {
                    str[i] = "Pair " + (i+1) + " = (" + resultPair[i][0] + ", " + resultPair[i][1] + ")";
                }
                viewer.ClassDlg.showDialogOnlyStr(this, false, str);
            }
        }
        else if(num == 6) {
            fileChooser.setDialogTitle("Read Classifier File");
            fileChooser.setMultiSelectionEnabled(false);
            FileFilter featureFilter = new FileNameExtensionFilter(
                    "Classifier File (cf)", "cf");
            fileChooser.setFileFilter(featureFilter);
            int returnVal = fileChooser.showDialog(this, "READ");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                global.Variables.fileChooserPath = fileChooser.getSelectedFile().getParent();
                rcf = new file.ReadClassifierFile(fileChooser.getSelectedFile().getPath());
                JOptionPane.showMessageDialog(this,
                        "Done.",
                        "Read CF File",
                        JOptionPane.PLAIN_MESSAGE);
            }
        }
        else {
            System.out.println("error");
        }
    }

    private static void applyLookNFeel() {
        JFrame.setDefaultLookAndFeelDecorated(true);

        try {
            UIManager.setLookAndFeel("org.jvnet.substance.skin.SubstanceCremeCoffeeLookAndFeel");
            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
        }
        catch(Exception e) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                JFrame.setDefaultLookAndFeelDecorated(true);
                JDialog.setDefaultLookAndFeelDecorated(true);
            }
            catch(Exception e2){}
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                applyLookNFeel();
                MainFrame mf = new MainFrame();
                RefineryUtilities.centerFrameOnScreen(mf);
                mf.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem FSAVDMenuItem;
    private javax.swing.JMenu FSMenu;
    private javax.swing.JMenuItem clstrScatterPlotMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JCheckBoxMenuItem editableMenuItem;
    private javax.swing.JMenuBar excelMenuBar;
    private javax.swing.JTabbedPane excelTabbedPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem gCloseMenuItem;
    private javax.swing.JMenuItem gTabNameMenuItem;
    private javax.swing.JPopupMenu gTabPopUpMenu;
    private javax.swing.JPopupMenu.Separator gTabPopUpSptr;
    private javax.swing.JRadioButtonMenuItem graphMenuItem;
    private javax.swing.JTabbedPane graphTabbedPanel;
    private javax.swing.JMenuItem kMeansMDMenuItem;
    private javax.swing.JMenuItem loocvMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem makeARFFMenuItem;
    private javax.swing.JMenuItem makeCFMenuItem;
    private javax.swing.JMenuItem makeFtrMenuItem;
    private javax.swing.JMenuItem makeLCMenuItem;
    private javax.swing.JMenuItem makeSPMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem predictAllMenuItem;
    private javax.swing.JMenu predictMenu;
    private javax.swing.JMenuItem predictSSMenuItem;
    private javax.swing.JMenuItem predictTMenuItem;
    private javax.swing.JMenuItem readCFMenuItem;
    private javax.swing.JMenuItem readFTRMenuItem;
    private javax.swing.JMenu resultMenu;
    private javax.swing.JMenuItem rocMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem tCloseMenuItem;
    private javax.swing.JMenuItem tTabNameMenuItem;
    private javax.swing.JPopupMenu tTabPopUpMenu;
    private javax.swing.JPopupMenu.Separator tTabPopUpSptr;
    private javax.swing.JRadioButtonMenuItem tableMenuItem;
    private javax.swing.ButtonGroup viewBtnGrp;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

}
